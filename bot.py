import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, WEBHOOK_URL, WEBHOOK_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.FORWARDED, self.handle_forwarded_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.\n\n"
            "üìã –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üì§ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, "
            "–∏ —è –ø–æ–∫–∞–∂—É –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def handle_forwarded_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        user = update.effective_user
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        info_text = "üì§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_text += f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞:**\n"
        info_text += f"‚Ä¢ ID: `{user.id}`\n"
        info_text += f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        if user.last_name:
            info_text += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
        if user.username:
            info_text += f"‚Ä¢ Username: @{user.username}\n"
        info_text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.forward_from:
            forward_user = message.forward_from
            info_text += f"üì§ **–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
            info_text += f"‚Ä¢ ID: `{forward_user.id}`\n"
            info_text += f"‚Ä¢ –ò–º—è: {forward_user.first_name}\n"
            if forward_user.last_name:
                info_text += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {forward_user.last_name}\n"
            if forward_user.username:
                info_text += f"‚Ä¢ Username: @{forward_user.username}\n"
            info_text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ, –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
        if message.forward_from_chat:
            forward_chat = message.forward_from_chat
            info_text += f"üì¢ **–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞:**\n"
            info_text += f"‚Ä¢ ID: `{forward_chat.id}`\n"
            info_text += f"‚Ä¢ –¢–∏–ø: {forward_chat.type}\n"
            info_text += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {forward_chat.title}\n"
            if forward_chat.username:
                info_text += f"‚Ä¢ Username: @{forward_chat.username}\n"
            info_text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        if message.forward_date:
            from datetime import datetime
            forward_date = datetime.fromtimestamp(message.forward_date)
            info_text += f"üìÖ **–î–∞—Ç–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:**\n"
            info_text += f"‚Ä¢ {forward_date.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        chat = message.chat
        info_text += f"üí¨ **–¢–µ–∫—É—â–∏–π —á–∞—Ç:**\n"
        info_text += f"‚Ä¢ ID: `{chat.id}`\n"
        info_text += f"‚Ä¢ –¢–∏–ø: {chat.type}\n"
        if chat.title:
            info_text += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        if chat.username:
            info_text += f"‚Ä¢ Username: @{chat.username}\n"
        
        await message.reply_text(info_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        user = update.effective_user
        
        info_text = (
            f"üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:**\n\n"
            f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:**\n"
            f"‚Ä¢ ID: `{user.id}`\n"
            f"‚Ä¢ –ò–º—è: {user.first_name}\n"
        )
        
        if user.last_name:
            info_text += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
        if user.username:
            info_text += f"‚Ä¢ Username: @{user.username}\n"
        
        info_text += f"\nüí¨ **–ß–∞—Ç:**\n"
        info_text += f"‚Ä¢ ID: `{message.chat.id}`\n"
        info_text += f"‚Ä¢ –¢–∏–ø: {message.chat.type}\n"
        
        if message.chat.title:
            info_text += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
        if message.chat.username:
            info_text += f"‚Ä¢ Username: @{message.chat.username}\n"
        
        info_text += f"\nüí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞, "
        info_text += f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
        
        await message.reply_text(info_text, parse_mode='Markdown')
    
    async def webhook_handler(self, update_dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Flask"""
        update = Update.de_json(update_dict, self.application.bot)
        await self.application.process_update(update)
    
    def run_webhook(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        self.application.bot.set_webhook(url=f"{WEBHOOK_URL}:{WEBHOOK_PORT}/webhook")
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}:{WEBHOOK_PORT}/webhook")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application.run_webhook(
            listen="0.0.0.0",
            port=WEBHOOK_PORT,
            webhook_url=f"{WEBHOOK_URL}:{WEBHOOK_PORT}/webhook"
        )

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run_webhook() 